require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./example/src/app.js":[function(require,module,exports){
"use strict";

var React = require("react"),
    Quicktip = require("quicktip");

var App = React.createClass({
	displayName: "App",

	getDefaultProps: function getDefaultProps() {
		return {
			useCases: [{
				message: "This is the tooltip right",
				direction: "right",
				contentToDisplay: "Tooltip on right"
			}, {
				message: "This is the tooltip left",
				direction: "left",
				contentToDisplay: "Tooltip on left"
			}, {
				message: "This is the tooltip top",
				direction: "top",
				contentToDisplay: "Tooltip on top"
			}, {
				message: "This is the tooltip on bottom",
				direction: "bottom",
				contentToDisplay: "Tooltip on bottom"
			}, {
				message: "I should show success theme",
				contentToDisplay: "Add additional class like success",
				additionalClasses: "success"
			}, {
				message: "I will close a little after you move the cursor out",
				contentToDisplay: "Close with more delay",
				closeDelay: 1000
			}]
		};
	},
	render: function render() {

		return React.createElement(
			"div",
			null,
			this.props.useCases.map(function (useCase, i) {
				return React.createElement(
					"div",
					{ className: "usecase", key: i },
					React.createElement(
						Quicktip,
						{ message: useCase.message, direction: useCase.direction, classesToAdd: useCase.additionalClasses, closeDelay: useCase.closeDelay },
						React.createElement(
							"button",
							{ className: "fancy-button" },
							useCase.contentToDisplay
						)
					)
				);
			})
		);
	}
});

React.render(React.createElement(App, null), document.getElementById("app"));


},{"quicktip":false,"react":false}]},{},["./example/src/app.js"])
//# sourceMappingURL=data:application/json;base64,
